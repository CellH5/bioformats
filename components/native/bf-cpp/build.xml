<!--
build.xml

Ant build file for the Bio-Formats C++ bindings.
Download Apache Ant from http://ant.apache.org/.
Type "ant -p" for a list of targets.
-->

<project name="bfcpp" default="compile-proxies" basedir=".">
  <description>
    Build file for Bio-Formats C++ bindings
  </description>
  <property name="root.dir" location="../../.."/>
  <import file="${root.dir}/ant/java.xml"/>
  <property file="build.properties"/>

  <target name="check-jace">
    <available file="${jace.home}/release/lib" property="jaceFound"/>
    <if>
      <isset property="jaceFound"/>
      <else>
<echo>
This component requires Jace, available from:
  http://sourceforge.net/projects/jace/

Please set the jace.home property to point to
your Jace installation directory. E.g.:
</echo>
        <!-- HACK - Document need for forward slashes even on Windows. -->
        <if>
          <isset property="isWindows"/>
          <then>
<echo>
  ant -Djace.home=C:/jace
</echo>
          </then>
          <else>
<echo>
  ant -Djace.home=${user.home}/jace
</echo>
          </else>
        </if>
<echo>
Please use an absolute path, not a relative one,
and use forward slashes (/), not backslashes (\).

You can check out the latest Jace code from
the Subversion repository using the command:
  svn co https://jace.svn.sourceforge.net/svnroot/jace/trunk jace
</echo>
        <fail message="Jace not found."/>
      </else>
    </if>
  </target>

  <target name="compile-jace" depends="check-jace"
    description="compile Jace Java classes and create libraries">
    <available file="${jace.home}/release/lib/jace.jar"
      property="jaceJarsExist"/>
    <if>
      <isset property="jaceJarsExist"/>
      <then>
<echo>Jace libraries exist; run clean-jace target first to recompile.</echo>
      </then>
      <else>
        <ant dir="${jace-java.dir}"/>
      </else>
    </if>
  </target>

  <target name="gen-proxies" depends="compile-jace, compile"
    description="generate C++ proxies for Bio-Formats Java library">
    <available file="${proxies.dir}" property="proxiesExist"/>
    <if>
      <isset property="proxiesExist"/>
      <then>
<echo>Proxies exist; run clean-proxies target first to regenerate.</echo>
      </then>
      <else>
        <mkdir dir="${proxies.dir}/include"/>
        <mkdir dir="${proxies.dir}/source"/>
        <if>
          <isset property="isWindows"/>
          <then>
            <!-- Generate proxies for Visual C++ builds. -->

            <!-- NB: Need to fork or else Ant raises a cryptic exception. -->
            <java classname="jace.proxy.AutoProxy" fork="true">
              <arg path="include"/>
              <arg path="source"/>
              <arg path="${proxies.dir}/include"/>
              <arg path="${proxies.dir}/source"/>
              <arg path="${proxies.cp}"/>
              <classpath>
                <pathelement path="jace"/><!-- for logback.xml -->
                <fileset dir="${jace.home}/release/lib">
                  <include name="*.jar"/>
                </fileset>
              </classpath>
              <arg value="-mindep"/>
              <arg value="-exportsymbols"/> <!-- required for Visual C++ -->
            </java>
          </then>
          <else>
            <!-- Generate proxies for GCC and other builds. -->

            <!-- NB: Need to fork or else Ant raises a cryptic exception. -->
            <java classname="jace.proxy.AutoProxy" fork="true">
              <arg path="include"/>
              <arg path="source"/>
              <arg path="${proxies.dir}/include"/>
              <arg path="${proxies.dir}/source"/>
              <arg path="${proxies.cp}"/>
              <classpath>
                <pathelement path="jace"/><!-- for logback.xml -->
                <fileset dir="${jace.home}/release/lib">
                  <include name="*.jar"/>
                </fileset>
              </classpath>
              <arg value="-mindep"/>
            </java>
          </else>
        </if>
        <!-- Escape certain constants to dodge global namespace conflicts. -->
        <java fork="true" classname="FixProxies"
          classpath="${classes.dir}:${component.runtime-cp}">
          <arg value="${proxies.dir}"/>
        </java>
        <!-- Generate Bio-Formats suffix list to a handy file. -->
        <java fork="true" classname="BioFormatsExtensionPrinter"
          classpath="${classes.dir}:${component.runtime-cp}"/>
      </else>
    </if>
  </target>


  <target name="clean-all" depends="clean, clean-proxies"
    description="deletes the bf-cpp build and all generated proxies">
  </target>

  <target name="gen-makefile" depends="check-jace, gen-proxies"
    description="generate build system for Bio-Formats C++ bindings">
    <mkdir dir="${build.dir}"/>
    <if>
      <isset property="isWindows"/>
      <then>
        <property name="cmake.generator" value="${cmake.generator.windows}"/>
      </then>
      <else>
        <property name="cmake.generator" value="${cmake.generator.other}"/>
      </else>
    </if>
    <exec executable="cmake" dir="${build.dir}" failonerror="true">
      <arg value="-G${cmake.generator}"/>
      <arg value="-DJACE_DIR=${jace.home}"/>
      <arg value=".."/>
    </exec>
  </target>

  <target name="copy-libs" depends="check-jace, compile-jace">
    <mkdir dir="${build.dir}"/>
    <copy file="${artifact.dir}/loci_tools.jar" todir="${build.dir}"/>
    <copy file="${jace.home}/release/lib/jace-runtime.jar"
      todir="${build.dir}"/>
    <if>
      <isset property="isWindows"/>
      <then>
        <copy file="${build.dir}/jace-runtime.jar"
          todir="${build.dir}/Debug"/>
        <copy file="${build.dir}/loci_tools.jar"
          todir="${build.dir}/Debug"/>
        <copy file="${build.dir}/jace-runtime.jar"
          todir="${build.dir}/release"/>
        <copy file="${build.dir}/loci_tools.jar"
          todir="${build.dir}/release"/>
      </then>
    </if>
  </target>


  <target name="dist"
    description="bundle binaries for distribution">
    <!-- CTR TODO - check whether all binaries actually exist -->

    <property name="bf-cpp.dist.dir" value="${dist.dir}/bf-cpp"/>
    <mkdir dir="${bf-cpp.dist.dir}"/>

    <echo/>
    <echo>-- Copying Bio-Formats Java libraries --</echo>
    <echo/>
    <if>
      <isset property="isWindows"/>
      <then>
        <property name="bf-cpp.build" value="${bf-cpp.build.windows}"/>
        <property name="jace.build" value="${jace.build.windows}"/>
      </then>
      <else>
        <property name="bf-cpp.build" value="${bf-cpp.build.other}"/>
        <property name="jace.build" value="${jace.build.other}"/>
      </else>
    </if>
    <copy file="${bf-cpp.build}/loci_tools.jar" todir="${bf-cpp.dist.dir}"/>
    <copy file="${bf-cpp.build}/jace-runtime.jar" todir="${bf-cpp.dist.dir}"/>

    <echo/>
    <echo>-- Copying Bio-Formats C++ shared libraries --</echo>
    <echo/>
    <copy todir="${bf-cpp.dist.dir}">
      <fileset dir="${bf-cpp.build}" includes="*.so"/>
      <fileset dir="${bf-cpp.build}" includes="*.dylib"/>
      <fileset dir="${bf-cpp.build}" includes="*.jnilib"/>
      <fileset dir="${bf-cpp.build}" includes="*.dll"/>
      <fileset dir="${bf-cpp.build}" includes="*.jar"/>
      <fileset dir="${jace.build}" includes="*.so"/>
      <fileset dir="${jace.build}" includes="*.dylib"/>
      <fileset dir="${jace.build}" includes="*.jnilib"/>
      <fileset dir="${jace.build}" includes="*.dll"/>
    </copy>

    <echo/>
    <echo>-- Creating distribution archive --</echo>
    <echo/>
    <if>
      <isset property="isWindows"/>
      <then>
        <!-- make a zip archive -->
        <zip destfile="${dist.dir}/bf-cpp.zip" basedir="${bf-cpp.dist.dir}"/>
      </then>
      <else>
        <!-- make a tar.gz archive -->
        <!--<tar destfile="${dist.dir}/bf-cpp.tar.gz"
          basedir="${bf-cpp.dist.dir}" compression="gzip"/>-->
        <!-- HACK - tar does not preserve permissions; use exec instead -->
        <echo>Building tar: bf-cpp.tar.gz</echo>
        <exec executable="tar">
          <arg value="czf"/>
          <arg value="${dist.dir}/bf-cpp.tar.gz"/>
          <arg value="-C"/>
          <arg value="${dist.dir}"/>
          <arg value="bf-cpp"/>
        </exec>
      </else>
    </if>
  </target>



  <target name="compile-proxies" depends="gen-makefile, copy-libs"
    description="build Bio-Formats C++ library">
    <if>
      <isset property="isWindows"/>
      <then>
        <exec executable="cmd" dir="${build.dir}" failonerror="true">
          <arg value="/c"/>
          <arg value="start"/>
          <arg value="bfcpp.sln"/>
        </exec>
<echo>
Please use Visual Studio to complete the build.
In Visual Studio, press F7, or select
"Build solution" from the "Build" menu.
After the build is complete, you will need to
copy jace.dll from ${build.dir}\jace\Debug to ${build.dir}\Debug
before the executables will run.
</echo>
      </then>
      <else>
        <exec executable="make" dir="${build.dir}" failonerror="true"/>
        <copy todir="${build.dir}" preservelastmodified="true">
          <fileset dir="${build.dir}/jace" includes="*jace*"/>
        </copy>
        <chmod file="${build.dir}/libjace.jnilib" perm="ugo+x"/>
        <if>
          <isset property="isMac"/>
          <then>
            <copy file="${build.dir}/libjace.jnilib"
              tofile="${build.dir}/libjace.dylib"/>
            <chmod file="${build.dir}/libjace.dylib" perm="ugo+x"/>
          </then>
        </if>
      </else>
    </if>
  </target>

  <target name="clean-jace" depends="check-jace"
    description="remove Jace build files and libraries">
    <ant dir="${jace-java.dir}" target="clean"/>
    <delete file="${jace.home}/release/lib/jace.jar"/>
    <delete file="${jace.home}/release/lib/jace-runtime.jar"/>
  </target>

  <target name="clean-proxies" description="remove generated C++ proxies">
    <delete dir="${proxies.dir}"/>
  </target>
</project>
